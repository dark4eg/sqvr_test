import { state } from 'cerebral';// export async function getHistory({ apollo, props: { limit, offset, filters } }) {////     const queryResult = await apollo.query({//         query: allHistory,//         variables: {//             limit,//             offset,//             filters,//         },//     });//     const { data } = queryResult;//     return {//         list: data.h,//     };// }const CONST_LIMIT = 10;export const getHistory = ({ api, props }) => {    // api.getHistory(props).then(items => {    //     store.set(state.history[props.path].items, items);    // });};export const setRoute = ({ store, get, route }) => {    store.set(state.current.route, route);};export const changeFilter = ({store, get, path, id}) => {    const list = get(state.history[path].filters);    const filter = list.find((i) => i.id === id);    const filterIndex = filter ? list.indexOf(filter) : undefined;    if (filterIndex) {        const current = state.history[path].filters[filterIndex];        store.set(state.history[path].filters[filterIndex], !current.isActive);    }};export const toggleCard = ({store, get, path, id}) => {    const list = get(state.history[path].list);    const card = list.find((i) => i.id === id);    const cardIndex = card ? list.indexOf(card) : undefined;    if (cardIndex) {        const current = state.history[path].list[cardIndex];        store.set(state.history[path].list[cardIndex], !current.isShowAdditional);    }};export const toggleFilter = ({store, get, path}) => {    const isShowFilter = get(state.history[path].isShowFilter);    store.set(state.history[path].isShowFilter, !isShowFilter);};export const addHistory = ({store, get, path, items}) => {    const currentList = get(state.history[path].items.list);    store.set(state.history[path].items, {        ...items,        list: currentList.concat(items.list),    });};export const clearItems = ({store, get, path}) => {    store.set(state.history[path].items, {        list: [],        meta: {            limit: CONST_LIMIT,            offset: 0,        }    });};export const setHistory = ({store, get, path, items}) => {    store.set(state.history[path].items, items);};