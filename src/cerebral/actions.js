import { state } from 'cerebral';import gql from 'graphql-tag';const allHistory = gql`query {    users {          history(limit: 10, offset: 0) {            date            historyType            systemText            documents {              id              mimetype            }            body            user {              id              firstName              lastName              avatarUrl            }            updater {              id              firstName              lastName              avatarUrl            }          }    }}`;export const getHistory = async ({apollo, props: {limit, offset, filters, userId}}) => {    // const query = userId ? {    //     query: allHistoryUser,    //     variables: {    //         limit,    //         offset,    //         filters,    //         userId    //     },    // } : {    //     query: allHistory,    //     variables: {    //         limit,    //         offset,    //         filters,    //     },    // };    const query = {        query: allHistory,        // variables: {        //     limit,        //     offset,        //     filters,        // },    };    const queryResult = await apollo.query(query);    const {data} = queryResult;    console.log('data', data);    return {        list: data.users.history,        meta: {            limit: limit,            offset: offset,        }    };};const CONST_LIMIT = 10;// export const getHistory = ({ context, store, api, apollo, props }) => {//     console.log('api', api);//     api.getHistory(props).then(items => {//         store.set(state.history.items, items);//     });// };export const setRoute = ({ store, get, route }) => {    store.set(state.current.route, route);};export const changeFilter = ({store, get, path, id}) => {    const list = get(state.history[path].filters);    const filter = list.find((i) => i.id === id);    const filterIndex = filter ? list.indexOf(filter) : undefined;    if (filterIndex) {        const current = state.history[path].filters[filterIndex];        store.set(state.history[path].filters[filterIndex], !current.isActive);    }};export const toggleCard = ({store, get, id}) => {    const list = get(state.history.list);    const card = list.find((i) => i.id === id);    const cardIndex = card ? list.indexOf(card) : undefined;    if (cardIndex) {        const current = state.history.list[cardIndex];        store.set(state.history.list[cardIndex], !current.isShowAdditional);    }};export const toggleFilter = ({store, get }) => {    const isShowFilter = get(state.history.isShowFilter);    store.set(state.history.isShowFilter, !isShowFilter);};export const addHistory = ({store, get, items}) => {    const currentList = get(state.history.items.list);    store.set(state.history.items, {        ...items,        list: currentList.concat(items.list),    });};export const clearItems = ({store, get }) => {    store.set(state.history.items, {        list: [],        meta: {            limit: CONST_LIMIT,            offset: 0,        }    });};export const setHistory = ({store, get, props}) => {    console.log('props', props);    store.set(state.history.items, {        list: props.list,        meta: props.meta,    });};