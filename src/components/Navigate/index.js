import React, { Fragment, Component } from 'react';import PropTypes from 'prop-types';import { bindActionCreators } from 'redux';import { connect } from 'react-redux';import { Switch, Route } from 'react-router-dom';import routes from './routes';import DefaultLayout from '../layouts/DefaultLayout';import setRouteInfoActionCreator from '../../store/actions/setRouteInfo';class Navigate extends Component {  // componentWillReceiveProps(newProps) {  //     const newQuery = qs.parse(newProps.location.search);  //     const currentQuery = qs.parse(this.props.location.search);  //     const mediaModalRouteParams = matchPath(newProps.location.pathname, modalRoutes[0]);  //     const currentMediaModalRouteParams = matchPath(this.props.location.pathname, modalRoutes[0]);  //     const { pathname: newPathName, search: newSearch } = newProps.location;  //     const { pathname: currentPathName, search: currentSearch } = this.props.location;  //     // Если есть, или был from это модалка, скролить ненужно  //     const isModalExist = !!(newQuery.from  //         || currentQuery.from  //         || mediaModalRouteParams  //         || currentMediaModalRouteParams  //     );  //  //     if (newPathName !== currentPathName && !isModalExist) {  //         scrollTo(0);  //     }  //  //     if (newPathName !== currentPathName || newSearch !== currentSearch) {  //         this.props.setRouteInfo({  //             path: newPathName,  //             url: newPathName + newProps.location.search,  //             query: newQuery,  //             previousURL: currentPathName + currentSearch,  //         });  //  //         requestMapService.clear();  //     }  //  //     this.setState({  //         from: newQuery.from,  //         mediaModalRouteParams,  //     });  // }  render() {    console.log('props', this.props);    return (      <Fragment>        <DefaultLayout>          <Switch>            {routes.map(route => (              <Route key={route.name} {...route} />            ))}          </Switch>        </DefaultLayout>      </Fragment>    );  }}const mapDispatchToProps = dispatch => ({  setRouteInfo: bindActionCreators(setRouteInfoActionCreator, dispatch)});Navigate.propTypes = {  routes: PropTypes.arrayOf(    PropTypes.shape({      path: PropTypes.string,      exact: PropTypes.bool,      component: PropTypes.node.isRequired,      name: PropTypes.string.isRequired,      layout: PropTypes.node.isRequired    })  )};Navigate.defaultProps = {  routes: routes};export default connect(  null,  mapDispatchToProps)(Navigate);